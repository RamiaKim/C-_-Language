#include <stdio.h>
#include <time.h>
#include <conio.h>
#include <stdlib.h>
#include <windows.h>

#define UP 119 // W
#define DOWN 115 // S
#define LEFT 97 // A
#define RIGHT 100 // D

typedef struct list
{
	int exist;

	int x;

	int y;

	list *next;
};

void movexy (int x, int y)
{
	COORD Pos = { x, y };
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), Pos);
}

void setcolor (int num)
{
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), num);
}

void print_else(int choose, int x, int y)
{

	setcolor(15);

	if (choose == 0)
	{
		movexy(x, y); printf("●●●●　　　　●　　●●●●●");
		movexy(x, y + 1); printf("●　　　●　　　●　　●　　　　");
		movexy(x, y + 2); printf("●　　　　●　　●　　●　　　　");
		movexy(x, y + 3); printf("●　　　　●　　●　　●●●●●");
		movexy(x, y + 4); printf("●　　　　●　　●　　●　　　　");
		movexy(x, y + 5); printf("●　　　　●　　●　　●　　　　");
		movexy(x, y + 6); printf("●　　　●　　　●　　●　　　　");
		movexy(x, y + 7); printf("●●●●　　　　●　　●●●●●");
	}

	else if (choose == 1)
	{
		movexy(x, y);        printf("●　　　●　　　●　　●　　●　　　●");
		movexy(x, y + 1); printf("●　　　●　　　●　　●　　●●　　●");
		movexy(x, y + 2); printf("●　　　●　　　●　　●　　●●　　●");
		movexy(x, y + 3); printf("	　●　●　●　●　　　●　　●　●　●");
		movexy(x, y + 4); printf("	●　●　●　●　　　●　　●　●　●");
		movexy(x, y + 5); printf("　	●　●　●　●　　　●　　●　　●●");
		movexy(x, y + 6); printf("		●　　　●　　　　●　　●　　●●");
		movexy(x, y + 7); printf("		●　　　●　　　　●　　●　　　●");
	}

	setcolor(7);

}

void snake_kbhit (int *moving_type)
{
	int key;

	if (_kbhit())
	{ //_kbhit

		key = _getch();

		switch (key)
		{

		case UP: // 위
			if (*moving_type != DOWN)
				*moving_type = UP;
			break;

		case DOWN: // 아래
			if (*moving_type != UP)
				*moving_type = DOWN;
			break;

		case LEFT: // 좌
			if (*moving_type != RIGHT)
				*moving_type = LEFT;
			break;

		case RIGHT:  // 우
			if (*moving_type != LEFT)
				*moving_type = RIGHT;
			break;

		}

	} // _kbhit end

}

void tail_remove (list *tail)
{
	list *temp = tail;

	movexy(temp->x, temp->y); // last tail

	printf("　");

}

void snake_moving_type (list *start, int moving_type)
{
	list *temp = start;

	int before_x, before_y;

	before_x = temp->x; // head data save
	before_y = temp->y;

	temp = temp->next;

	if (moving_type) // move?
		while (temp != NULL)
		{
			temp->x = before_x;
			temp->y = before_y;

			temp = temp->next;

			before_x = temp->x;
			before_y = temp->y;
		}

	temp = start;

	switch (moving_type) // move
	{

	case UP:
		if (temp->y >= 0) // up wall
			temp->y = temp->y - 1;
		break;

	case DOWN:
		if (temp->y <= 28) // down wall
			temp->y = temp->y + 1;
		break;

	case LEFT:
		if (temp->x >= 2) // left wall
			temp->x = temp->x - 2;
		break;

	case RIGHT:
		if (temp->x <= 68) // right wall
			temp->x = temp->x + 2;
		break;

	}

}

void snake_printf (list *start)
{
	list *temp = start;

	int head = 1;

	while (temp != NULL)
	{ // printf

		movexy(temp->x, temp->y);

		if (head == 1)
		{
			setcolor(14);
			head = 0;
		}
		else
			setcolor(15);

		printf("◎");

		temp = temp->next;

	} // printf end

}

void map()
{//71 29

	int i;

	movexy(0, 0);

	for (i = 0; i < 50; i++)
		printf("■");

	for (i = 0; i < 27; i++)
	{
		movexy(0, 1 + i); printf("■");

		movexy(68, 1 + i); printf("■");

		movexy(98, 1 + i); printf("■");
	}

	movexy(0, 28);

	for (i = 0; i < 50; i++)
		printf("■");
}

list* first_snake_set (list *tail)
{
	list *temp = tail;

	list *new_node = (list*)malloc(sizeof(list));

	int i;
	int snake_exist, snake_x, snake_y;

	for (i = 0; i < 5; i++)
	{
		snake_exist = 1; // exist
		snake_x = 35; // x
		snake_y = 11 + i; // y

		new_node->exist = snake_exist;
		new_node->x = snake_x;
		new_node->y = snake_y;
		new_node->next = NULL;
		tail->next = new_node;
		tail = new_node;
	}
	return tail;
}

int snake_bumped (list *start)
{
	list *temp = start;

	int before_x, before_y;

	before_x = temp->x;
	before_y = temp->y;

	while (temp != NULL) // snake bumped
	{
		temp = temp->next;

		if (before_x == temp->x)
		{
			if (before_y == temp->y)
			{
				return 1;
			}
		}

		before_x = temp->x;
		before_y = temp->y;
	}

	temp = start;

	if (temp->x <= 2)
		return 1; // left bumped

	if (temp->x >= 67)
		return 1; // right bumped

	if (temp->y <= 0)
		return 1; // up bumped

	if (temp->y >= 28)
		return 1; // down bumped

	return 0; // nothing
}

list* apple_score(list *start, list *tail, int(*apple)[3], int *snake_time, int *tail_num)
{
	list *temp = start;
	list *temp_1 = tail;

	list *new_node = (list*)malloc(sizeof(list));

	if (apple[0][0] == 1) // apple exist ?
		if (temp->y == apple[0][2]) // y pos equal
			if (temp->x == apple[0][1]) // x pos equal
			{
				if (*snake_time >= 10)
					*snake_time = *snake_time - 2;

				*tail_num = *tail_num + 1;

				new_node->exist = 1;
				new_node->next = NULL;
				tail->next = new_node;
				tail = new_node;

				movexy(apple[0][1], apple[0][2]); printf("　");

				*(*(apple + 0) + 0) = 0;
				*(*(apple + 0) + 1) = 0;
				*(*(apple + 0) + 2) = 0;
			}

	return tail;
}

void apple_maker(int(*apple)[3])
{
	int rand_x_pos, rand_y_pos;

	while (1)
	{
		rand_x_pos = (rand() % 29 + 1) * 2 + 5;

		rand_y_pos = rand() % 28 + 2;

		if (rand_x_pos > 3 && rand_x_pos < 65 && rand_y_pos > 2 && rand_y_pos < 26) // useful pos
			break;
	}

	setcolor(12);

	movexy(rand_x_pos, rand_y_pos); printf("★");

	setcolor(7);

	*(*(apple + 0) + 0) = 1; // exist

	*(*(apple + 0) + 1) = rand_x_pos;

	*(*(apple + 0) + 2) = rand_y_pos;
}

void main()
{
	list *start = (list*)malloc(sizeof(list)), *head, *tail;

	int tail_num=4;

	int moving_type = 0;

	int snake_time=60;

	int apple[1][3] = { 0 }; // apple [exist] [x] [y]

	int i;

	head = start;
	tail = start;
	tail->next = NULL;

	srand((unsigned)time(NULL)); // srand(time)

	system("mode con:cols=101 lines=29"); // console size set

	movexy(79, 3); printf("SNAKE GAME");

	movexy(82, 7); printf("RULE");
	movexy(79, 9); printf("↑ = UP");
	movexy(79, 10); printf("↓ = DOWN");
	movexy(79, 11); printf("← = LEFT");
	movexy(79, 12); printf("→ = RIGHT");
	movexy(75, 14); printf("WIN = TAIL NUM = 30");
	movexy(76, 16); printf("DIE = BUMPED HEAD");

	movexy(73, 25); printf("Made By , Kim Jung Sup");
	movexy(84, 26); printf("201601124");

	tail=first_snake_set(tail); // first set

	while (1)
	{
		map(); // set map

		if (snake_bumped(start)) // snake bumped ?
			break; // loose

		tail=apple_score(start, tail, apple, &snake_time, &tail_num);

		if (apple[0][0] == 0) // don't exist apple -> apple make
			apple_maker(apple);

		if (apple[0][0] == 1) { setcolor(12); movexy(apple[0][1], apple[0][2]); printf("★"); }

		snake_kbhit(&moving_type);

		tail_remove(tail);

		snake_moving_type(start, moving_type); // x pos , y pos move

		snake_printf(start);

		movexy(76, 19); printf("SNAKE SLEEP = %d", snake_time);

		movexy(76, 22); printf("◎ TAIL NUM = %d", tail_num);

		Sleep(snake_time);

		if (tail_num == 30) // win
			break;

	} // game while end

	if (tail_num == 30)
		print_else(1, 20, 10);
	else
		print_else(0, 20, 10);

	moving_type = 0;

	Sleep(30000000);
}
