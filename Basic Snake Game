#include<stdio.h>
#include<time.h> // srand()
#include<conio.h> // _kbhit()
#include<stdlib.h> // rand()
#include<windows.h> // set console size() , Sleep()

#define UP 72//119
#define DOWN 80//115
#define LEFT 75//97
#define RIGHT 77//100

void movexy(int x, int y)
{
	COORD Pos = { x, y };
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), Pos);
}

void setcolor(int num)
{
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), num);
}

void print_else(int choose, int x, int y)
{

	setcolor(15);

	if (choose == 0)
	{
		movexy(x, y); printf("●●●●　　　　●　　●●●●●");
		movexy(x, y + 1); printf("●　　　●　　　●　　●　　　　");
		movexy(x, y + 2); printf("●　　　　●　　●　　●　　　　");
		movexy(x, y + 3); printf("●　　　　●　　●　　●●●●●");
		movexy(x, y + 4); printf("●　　　　●　　●　　●　　　　");
		movexy(x, y + 5); printf("●　　　　●　　●　　●　　　　");
		movexy(x, y + 6); printf("●　　　●　　　●　　●　　　　");
		movexy(x, y + 7); printf("●●●●　　　　●　　●●●●●");
	}

	else if (choose == 1)
	{
		movexy(x, y); printf("●　　　●　　　●　　●　　●　　　●");
		movexy(x, y+1); printf("●　　　●　　　●　　●　　●●　　●");
		movexy(x, y+2); printf("●　　　●　　　●　　●　　●●　　●");
		movexy(x, y+3); printf("	●　●　●　●　　　●　　●　●　●");
		movexy(x, y+4); printf("	●　●　●　●　　　●　　●　●　●");
		movexy(x, y+5); printf("	●　●　●　●　　　●　　●　　●●");
		movexy(x, y+6); printf("		●　　　●　　　　●　　●　　●●");
		movexy(x, y+7); printf("		●　　　●　　　　●　　●　　　●");
	}

	setcolor(7);

}

void snake_kbhit(int *moving_type)
{
	int key;

	if (_kbhit())
	{ //_kbhit

		key = _getch();

		switch (key)
		{

		case UP: // 위
			if (*moving_type != DOWN)
				*moving_type = UP;
			break;

		case DOWN: // 아래
			if (*moving_type != UP)
				*moving_type = DOWN;
			break;

		case LEFT: // 좌
			if (*moving_type != RIGHT)
				*moving_type = LEFT;
			break;

		case RIGHT:  // 우
			if (*moving_type != LEFT)
				*moving_type = RIGHT;
			break;

		}

	} // _kbhit end

}

void tail_remove (int (*snake)[3],int *tail)
{

	movexy(snake[*tail][1], snake[*tail][2]); // last tail

	printf("　");

}

void snake_moving_type (int (*snake)[3], int moving_type, int *tail)
{
	int i;

	if (moving_type) // move?
		for (i = *tail; i > 0; i--)// tail_tlanslate
		{
			snake[i][1] = snake[i - 1][1];
			snake[i][2] = snake[i - 1][2];
		}

	switch (moving_type) // move
	{

	case UP:
		if(snake[0][2]>=0) // up wall
			snake[0][2] = snake[0][2] - 1;
		break;

	case DOWN:
		if(snake[0][2]<=28) // down wall
			snake[0][2] = snake[0][2] + 1;
		break;

	case LEFT:
		if(snake[0][1]>=2) // left wall
			snake[0][1] = snake[0][1] - 2;
		break;

	case RIGHT:
		if(snake[0][1]<=68) // right wall
			snake[0][1] = snake[0][1] + 2;
		break;

	}

}

void snake_printf (int(*snake)[3],int *tail)
{
	int i;

	for (i = 0; i < *tail+1; i++)
	{ // printf
		movexy(snake[i][1], snake[i][2]);
		if (i == 0)
			setcolor(14);
		else
			setcolor(15);
		if (i >= 0) { printf("◎"); }
	} // printf end
}

void map()
{//71 29

	int i;

	movexy(0, 0);

	for (i = 0; i < 50; i++)
		printf("■");

	for (i = 0; i < 27; i++)
	{
		movexy(0, 1 + i); printf("■");

		movexy(68, 1 + i); printf("■");

		movexy(98, 1 + i); printf("■");
	}

	movexy(0, 28);

	for (i = 0; i < 50; i++)
		printf("■");
}

void apple_maker (int (*apple)[3])
{
	int rand_x_pos, rand_y_pos;

	while (1)
	{
		rand_x_pos = (rand() % 29 + 1) * 2 + 5;

		rand_y_pos = rand() % 28 + 2;

		if (rand_x_pos > 3 && rand_x_pos < 65 && rand_y_pos > 2 && rand_y_pos < 26) // useful pos
			break;
	}

	setcolor(12);

	movexy(rand_x_pos, rand_y_pos); printf("★");

	setcolor(7);

	*(*(apple + 0) + 0) = 1; // exist

	*(*(apple + 0) + 1) = rand_x_pos;

	*(*(apple + 0) + 2) = rand_y_pos;
}

void apple_score (int(*snake)[3], int(*apple)[3], int *tail, int *snake_time)
{

		if(apple[0][0]==1) // apple exist ?
			if (snake[0][2]==apple[0][2]) // y pos equal
				if (snake[0][1] == apple[0][1]) // x pos equal
				{
					if(*snake_time>=10)
						*snake_time = *snake_time - 2;

					*tail = *tail + 1;

					*(*(snake + *tail) + 0) = 1;

					movexy(apple[0][1], apple[0][2]); printf("　");

					*(*(apple + 0) + 0) = 0;
					*(*(apple + 0) + 1) = 0;
					*(*(apple + 0) + 2) = 0;
				}
}

int snake_bumped (int(*snake)[3], int *tail)
{
	int i;

	for (i = 0; i < *tail; i++)
		if (snake[0][1] == snake[i+1][1])
			if (snake[0][2] == snake[i+1][2])
				return 1; // snake bumped

	if (snake[0][1] <= 2)
		return 1; // left bumped

	if (snake[0][1] >= 67)
		return 1; // right bumped

	if (snake[0][2] <= 0)
		return 1; // up bumped

	if (snake[0][2] >= 28)
		return 1; // down bumped

	return 0; // nothing
}

void main()
{
	int i;

	int snake[30][3];

	int moving_type = 0; // up down left right

	int tail=4; // last tail

	int apple[1][3] = {0}; // apple [exist] [x] [y]

	int snake_time = 60; // speed

	srand((unsigned)time(NULL)); // srand(time)
	
	system("mode con:cols=101 lines=29"); // console size set

	while (1)
	{
		moving_type = 0; tail = 4; apple[0][0] = 0; snake_time = 60;

		movexy(79, 3); printf("SNAKE GAME");

		movexy(82, 7); printf("RULE");
		movexy(79, 9); printf("↑ = UP");
		movexy(79, 10); printf("↓ = DOWN");
		movexy(79, 11); printf("← = LEFT");
		movexy(79, 12); printf("→ = RIGHT");
		movexy(75, 14); printf("WIN = TAIL NUM = 30");
		movexy(76, 16); printf("DIE = BUMPED HEAD");

		movexy(73, 25); printf("Made By , Kim Jung Sup");
		movexy(84, 26); printf("201601124");

		for (i = 0; i < 5; i++)
		{
			snake[i][0] = 1; // exist
			snake[i][1] = 35; // x
			snake[i][2] = 11 + i; // y
		}

		while (1)
		{
			map(); // set map

			if (snake_bumped(snake, &tail)) // snake bumped ?
				break; // loose

			apple_score(snake, apple, &tail, &snake_time); // tail add

			if (apple[0][0] == 0) // don't exist apple -> apple make
				apple_maker(apple);

			if (apple[0][0] == 1) { setcolor(12); movexy(apple[0][1], apple[0][2]); printf("★"); }

			snake_kbhit(&moving_type);

			tail_remove(snake, &tail);

			snake_moving_type(snake, moving_type, &tail); // x pos , y pos move

			snake_printf(snake, &tail);

			movexy(76, 19); printf("SNAKE SLEEP = %d", snake_time);

			movexy(76, 22); printf("◎ TAIL NUM = %d", tail);

			Sleep(snake_time);

			if (tail == 30) // win
				break;

		} // game while end

		if (tail == 30)
			print_else(1, 20, 10);
		else
			print_else(0, 20, 10);

		moving_type = 0;

		Sleep(3000);

		system("cls");

	} // while end

}// main end
